[{"content":"这是我的第二个博客\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cctype\u0026gt; // 自定义哈希函数 struct CaseInsensitiveHash { std::size_t operator()(const std::string \u0026amp;s) const { std::string lower_s = s; std::transform(lower_s.begin(), lower_s.end(), lower_s.begin(), [](unsigned char c) { return std::tolower(c); }); return std::hash\u0026lt;std::string\u0026gt;{}(lower_s); } }; // 自定义比较函数 struct CaseInsensitiveEqual { bool operator()(const std::string \u0026amp;lhs, const std::string \u0026amp;rhs) const { return lhs.size() == rhs.size() \u0026amp;\u0026amp; std::equal(lhs.begin(), lhs.end(), rhs.begin(), [](unsigned char a, unsigned char b) { return std::tolower(a) == std::tolower(b); }); } }; // field 类定义 class field { public: using comment_container = std::vector\u0026lt;std::string\u0026gt;; }; // 先声明 basic_inifile template \u0026lt;typename Hash, typename Equal\u0026gt; class basic_inifile; // ini section（支持大小写不敏感键） template \u0026lt;typename Hash, typename Equal\u0026gt; class basic_section { // 允许 basic_inifile 访问 private 成员 template \u0026lt;typename H, typename E\u0026gt; friend class basic_inifile; using DataContainer = std::unordered_map\u0026lt;std::string, field, Hash, Equal\u0026gt;; public: using comment_container = field::comment_container; using key_type = typename DataContainer::key_type; using mapped_type = typename DataContainer::mapped_type; using value_type = typename DataContainer::value_type; using size_type = typename DataContainer::size_type; using difference_type = typename DataContainer::difference_type; using iterator = typename DataContainer::iterator; using const_iterator = typename DataContainer::const_iterator; // 默认构造 basic_section() = default; // 默认析构函数 ~basic_section() = default; // 默认移动构造函数 basic_section(basic_section \u0026amp;\u0026amp;) noexcept = default; // 默认移动赋值函数 basic_section \u0026amp;operator=(basic_section \u0026amp;\u0026amp;) noexcept = default; private: DataContainer data_; // 存储键值对 }; // ini 文件类，存储多个 section template \u0026lt;typename Hash, typename Equal\u0026gt; class basic_inifile { public: using section = basic_section\u0026lt;Hash, Equal\u0026gt;; // 在 basic_inifile 内部定义 section 别名 using SectionContainer = std::unordered_map\u0026lt;std::string, section, Hash, Equal\u0026gt;; using key_type = typename SectionContainer::key_type; using mapped_type = typename SectionContainer::mapped_type; using value_type = typename SectionContainer::value_type; using size_type = typename SectionContainer::size_type; using difference_type = typename SectionContainer::difference_type; using iterator = typename SectionContainer::iterator; using const_iterator = typename SectionContainer::const_iterator; // 默认构造 basic_inifile() = default; // 默认析构 ~basic_inifile() = default; // 默认移动构造 basic_inifile(basic_inifile \u0026amp;\u0026amp;) noexcept = default; // 默认移动赋值 basic_inifile \u0026amp;operator=(basic_inifile \u0026amp;\u0026amp;) noexcept = default; // 添加一个 section section \u0026amp;add_section(const std::string \u0026amp;name) { return sections_[name]; // 如果 name 存在，返回已有的 section，否则创建新 section } // 获取一个 section（可变版本） section *get_section(const std::string \u0026amp;name) { auto it = sections_.find(name); return it != sections_.end() ? \u0026amp;it-\u0026gt;second : nullptr; } // 获取一个 section（只读版本） const section *get_section(const std::string \u0026amp;name) const { auto it = sections_.find(name); return it != sections_.end() ? \u0026amp;it-\u0026gt;second : nullptr; } private: SectionContainer sections_; // 存储多个 section }; // 提供默认大小写不敏感的类型别名（类似 std::string） using section = basic_section\u0026lt;CaseInsensitiveHash, CaseInsensitiveEqual\u0026gt;; using inifile = basic_inifile\u0026lt;CaseInsensitiveHash, CaseInsensitiveEqual\u0026gt;; #include \u0026lt;iostream\u0026gt; int main() { inifile ini; // 默认使用大小写不敏感模式 ini.add_section(\u0026#34;General\u0026#34;); ini.add_section(\u0026#34;Database\u0026#34;); // 测试大小写不敏感 if (ini.get_section(\u0026#34;general\u0026#34;)) { std::cout \u0026lt;\u0026lt; \u0026#34;Section \u0026#39;General\u0026#39; exists (case insensitive)\u0026#34; \u0026lt;\u0026lt; std::endl; } if (ini.get_section(\u0026#34;DATABASE\u0026#34;)) { std::cout \u0026lt;\u0026lt; \u0026#34;Section \u0026#39;Database\u0026#39; exists (case insensitive)\u0026#34; \u0026lt;\u0026lt; std::endl; } return 0; } ","date":"2025-04-02T21:38:50+08:00","permalink":"https://abin-z.github.io/p/secondblog/","title":"SecondBlog"},{"content":"你好, 世界 这是我的第一个博客\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #include \u0026lt;inifile/inifile.h\u0026gt; /// @brief Specialization of INIFILE_TYPE_CONVERTER for std::vector\u0026lt;T\u0026gt;. /// @tparam T The type of elements in the vector. template \u0026lt;typename T\u0026gt; struct INIFILE_TYPE_CONVERTER\u0026lt;std::vector\u0026lt;T\u0026gt;\u0026gt; { /// @brief Encodes a vector into a delimited string. void encode(const std::vector\u0026lt;T\u0026gt; \u0026amp;vec, std::string \u0026amp;value) { constexpr char delimiter = \u0026#39;,\u0026#39;; // Delimiter used to separate elements in the string std::string encoded_item; for (const auto \u0026amp;v : vec) { INIFILE_TYPE_CONVERTER\u0026lt;T\u0026gt; conv; conv.encode(v, encoded_item); // Encode each element of the vector value += encoded_item + delimiter; // Append the encoded element and delimiter } if (value.back() == delimiter) value.pop_back(); // Remove the trailing delimiter } /// @brief Decodes a delimited string into a vector. void decode(const std::string \u0026amp;value, std::vector\u0026lt;T\u0026gt; \u0026amp;vec) { constexpr char delimiter = \u0026#39;,\u0026#39;; // Delimiter used to separate elements in the string std::vector\u0026lt;std::string\u0026gt; info = ini::split(value, delimiter); // Split the string T encoded_item; for (const auto \u0026amp;v : info) { INIFILE_TYPE_CONVERTER\u0026lt;T\u0026gt; conv; conv.decode(v, encoded_item); // Decode each part of the string vec.emplace_back(std::move(encoded_item)); // Add the decoded element to the vector } } }; /// @brief Print the contents of a vector to the console. template \u0026lt;typename T\u0026gt; void print_vector(const std::vector\u0026lt;T\u0026gt; \u0026amp;vec) { std::cout \u0026lt;\u0026lt; \u0026#34;[\u0026#34;; for (size_t i = 0; i \u0026lt; vec.size(); ++i) { std::cout \u0026lt;\u0026lt; vec[i]; if (i != vec.size() - 1) { std::cout \u0026lt;\u0026lt; \u0026#34;, \u0026#34;; } } std::cout \u0026lt;\u0026lt; \u0026#34;]\u0026#34; \u0026lt;\u0026lt; std::endl; } int main() { ini::inifile inif; // Create an INI file object // Define vectors of different types std::vector\u0026lt;int\u0026gt; vec1 = {1, 2, 3, 4, 5}; std::vector\u0026lt;double\u0026gt; vec2 = {1.1111, 2.2222, 3.3333, 4.4444, 5.5555}; std::vector\u0026lt;std::string\u0026gt; vec3 = {\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;, \u0026#34;ccc\u0026#34;, \u0026#34;ddd\u0026#34;, \u0026#34;eee\u0026#34;}; // Set different types of vectors in the INI file object inif[\u0026#34;section\u0026#34;][\u0026#34;key1\u0026#34;] = vec1; inif[\u0026#34;section\u0026#34;][\u0026#34;key2\u0026#34;] = vec2; inif[\u0026#34;section\u0026#34;][\u0026#34;key3\u0026#34;] = vec3; // Get different vectors from INI file object std::vector\u0026lt;int\u0026gt; v1 = inif[\u0026#34;section\u0026#34;][\u0026#34;key1\u0026#34;]; std::vector\u0026lt;double\u0026gt; v2 = inif[\u0026#34;section\u0026#34;][\u0026#34;key2\u0026#34;]; std::vector\u0026lt;std::string\u0026gt; v3 = inif[\u0026#34;section\u0026#34;][\u0026#34;key3\u0026#34;]; // Print the vectors to the console print_vector(v1); print_vector(v2); print_vector(v3); // Print the entire INI file content as a string std::cout \u0026lt;\u0026lt; \u0026#34;ini info:\\n\u0026#34; \u0026lt;\u0026lt; inif.to_string() \u0026lt;\u0026lt; std::endl; return 0; // Exit the program } 添加了自动部署功能\n","date":"2025-04-01T23:37:26+08:00","permalink":"https://abin-z.github.io/p/firstblog/","title":"Firstblog"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://abin-z.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://abin-z.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://abin-z.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://abin-z.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://abin-z.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://abin-z.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://abin-z.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://abin-z.github.io/p/emoji-support/","title":"Emoji Support"}]